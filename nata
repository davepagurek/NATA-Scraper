#!/usr/bin/perl

use v5.10;
use strict;
use warnings;
#use autodie;

use URI;
use Web::Scraper;
use Encode;
use Data::Dumper;
use File::Fetch;
use JSON;
use File::Slurp;
use File::pushd;
use Cwd;

my $config_json = read_file("config.json");
my $config = decode_json $config_json;

if ($ARGV[0]) {
    if ($ARGV[0] eq "parse") {
        parse();
    } elsif ($ARGV[0] eq "download") {
        download();
    } elsif ($ARGV[0] eq "convert") {
        convert();
    } elsif ($ARGV[0] eq "screenshots") {
        screenshots();
    } elsif ($ARGV[0] eq "run") {
        parse();
        download();
        convert();
        screenshots();
    } else {
        show_help();
    }
} else {
    show_help();
}

sub show_help {
    print "Usage:
    perl nata parse
    perl nata download
    perl nata convert
    perl nata screenshots\n";
}

sub parse {
    my $participants = scraper {
        process "h3 + ul li", "entrants[]" => "TEXT";
        result "entrants";
    };

    my $movieURLs = scraper {
        process ".movies a", "movies[]" => '@href';
        result "movies";
    };

    my $entry = scraper {
        process ".tags ~ dd a", "tags[]" => "TEXT";
        process ".podtop h2", "title" => "TEXT";
        process "#main > script:not([src])", "flashvars[]" => 'RAW';
    };

    my $videos = {};

    print "Entrants:\n\n";
    for my $entrant (@{ $config->{entrants} }) {
        print "$entrant\n";

        my $urls = $movieURLs->scrape( URI->new("http://$entrant.newgrounds.com/movies/") );
        my @movies = grep {
            $config->{roundTag} ~~ @{ $_->{tags} || [] }
        } map {
            $entry->scrape( URI->new($_) )
        } splice @{ $urls }, 0, $config->{moviesToCheck};

        if (my $movie = $movies[0]) {
            for my $flashvars (@{ $movie->{flashvars} }) {
                $flashvars =~ s/&amp;/&/g;
                $flashvars =~ s/&lt;/</g;
                $flashvars =~ s/&gt;/>/g;
                $flashvars =~ s/&quot;/"/g;
                $flashvars =~ s|\\/|/|g;
                ($movie->{video}) = ($flashvars =~ m{"url":"(http://.+?\.(?:mp4|swf|wmv|mov))});
                last if $movie->{video};
            }

            print "\t$movie->{title}\n";
            print "\t$movie->{video}\n" if $movie->{video};

            $videos->{$entrant} = {
                title => $movie->{title},
                video => $movie->{video}
            };
        } else {
            $videos->{$entrant} = {};
            print "\tNo entry yet!\n";
        }
        print "\n";
    }

    print "Writing output...";
    open my $outfile, ">", "entries.json" or die "Can't open entries.json: $!";
    print $outfile to_json($videos, {pretty => 1});
    close $outfile;
    print "done!\n";
}

sub download {
    my $json_string = read_file("entries.json") or die "Can't read entries.json: $!";
    my $videos = decode_json $json_string;

    my $to_convert = {};

    while (my ($entrant, $data) = each %{ $videos }) {
        print "Downloading entry from $entrant\n";

        my $url = $data->{video};
        unless ($url) {
            print "\tNo movie to download.\n";
            next;
        } else {
            print "\tfrom url $url\n";
        }
        my $download = File::Fetch->new(uri => $url);
        my $path = "";

        if ($url =~ /\.swf$/) {
            $path = $download->fetch( to => "swf");
            $to_convert->{$entrant} = $path;
        } elsif ($url =~ /\.mp4$/) {
            $path = $download->fetch( to => "mp4");
            my $renamed = $path;
            $renamed =~ s{(\/|\\)[\w\d_]+?\.mp4}{$1$entrant.mp4};
            print "\trenaming to $renamed\n";
            rename($path, $renamed);
        } else {
            $path = $download->fetch( to => "other");
        }
    }

    print "Writing output...";
    open my $outfile, ">", "to_convert.json" or die "Can't open to_convert.json: $!";
    print $outfile to_json($to_convert, {pretty => 1});
    close $outfile;
    print "done!\n";
}

sub convert {
    my $json_string = read_file("to_convert.json") or die "Can't read to_convert.json: $!";
    my $to_convert = decode_json $json_string;


    while (my ($entrant, $path) = each %{ $to_convert }) {
        next if -e "mp4/$entrant.mp4";
        print "Converting swf to mp4 for $entrant\n";
        system($config->{swivel}, $path,
            "-s" => "1280x720",
            "-o" => "mp4/$entrant.mp4"
        );
    }
    print "Done!\n";
}

sub screenshots {
    opendir (my $videos, "mp4") or die "Couldn't read videos directory: $!";
    while (my $video = readdir($videos)) {
        next if $video =~ /^\./;
        my ($entrant) = $video =~ /([\w-]+)\.mp4/;
        print "Making screenshots for $video:\n";
        make_screenshots($entrant, "./mp4/$video");
    }
}

sub make_screenshots {
    my ($entrant, $video) = @_;
    my ($hrs_range, $min_range, $sec_range);
    my $ffmpeg = $config->{ffmpeg};
    my $duration = `$ffmpeg -i "$video" 2>&1`;
    if ($duration =~ /Duration: (\d{2}):(\d{2}):(\d{2})/) {
        ($hrs_range, $min_range, $sec_range) = ($1, $2, $3);
    } else {
        print "Duration parse error for $video: $duration\n";
        return;
    }

    mkdir("screenshots") unless (-d "screenshots");

    for my $i (1..3) {
        my $hrs = int(rand($hrs_range));
        my $min = ($hrs == $hrs_range) ? int(rand($min_range)) : int(rand(60));
        my $sec = ($hrs == $hrs_range && $min == $min_range) ?
        int(rand($sec_range)) : int(rand(60));

        print "\tCreating screenshot $i\n";
        `$ffmpeg -ss $hrs:$min:$sec -t 1 -i "$video" -f mjpeg "screenshots/$entrant.$i.jpg"`;

        if ($! || !( -e "screenshots/$entrant.$i.jpg" )) {
           print "Error making screenshot: $!\n";
           return;
        }
    }
}
